// Generated by gencpp from file miro2_msg/animal_state.msg
// DO NOT EDIT!


#ifndef MIRO2_MSG_MESSAGE_ANIMAL_STATE_H
#define MIRO2_MSG_MESSAGE_ANIMAL_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <miro2_msg/affect.h>
#include <miro2_msg/affect.h>
#include <miro2_msg/sleep.h>

namespace miro2_msg
{
template <class ContainerAllocator>
struct animal_state_
{
  typedef animal_state_<ContainerAllocator> Type;

  animal_state_()
    : flags(0)
    , emotion()
    , mood()
    , sleep()
    , time_of_day(0.0)
    , sound_level(0.0)  {
    }
  animal_state_(const ContainerAllocator& _alloc)
    : flags(0)
    , emotion(_alloc)
    , mood(_alloc)
    , sleep(_alloc)
    , time_of_day(0.0)
    , sound_level(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _flags_type;
  _flags_type flags;

   typedef  ::miro2_msg::affect_<ContainerAllocator>  _emotion_type;
  _emotion_type emotion;

   typedef  ::miro2_msg::affect_<ContainerAllocator>  _mood_type;
  _mood_type mood;

   typedef  ::miro2_msg::sleep_<ContainerAllocator>  _sleep_type;
  _sleep_type sleep;

   typedef float _time_of_day_type;
  _time_of_day_type time_of_day;

   typedef float _sound_level_type;
  _sound_level_type sound_level;





  typedef boost::shared_ptr< ::miro2_msg::animal_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::miro2_msg::animal_state_<ContainerAllocator> const> ConstPtr;

}; // struct animal_state_

typedef ::miro2_msg::animal_state_<std::allocator<void> > animal_state;

typedef boost::shared_ptr< ::miro2_msg::animal_state > animal_statePtr;
typedef boost::shared_ptr< ::miro2_msg::animal_state const> animal_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::miro2_msg::animal_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::miro2_msg::animal_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace miro2_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'miro2_msg': ['/tmp/miro2/release/191016/mdk/catkin_ws/src/miro2_msg/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::miro2_msg::animal_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miro2_msg::animal_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro2_msg::animal_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miro2_msg::animal_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro2_msg::animal_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miro2_msg::animal_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::miro2_msg::animal_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02b89a84b06f59e91819662e7c3d6b0e";
  }

  static const char* value(const ::miro2_msg::animal_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02b89a84b06f59e9ULL;
  static const uint64_t static_value2 = 0x1819662e7c3d6b0eULL;
};

template<class ContainerAllocator>
struct DataType< ::miro2_msg::animal_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "miro2_msg/animal_state";
  }

  static const char* value(const ::miro2_msg::animal_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::miro2_msg::animal_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#	@section COPYRIGHT\n\
#	Copyright (C) 2019 Consequential Robotics Ltd\n\
#	\n\
#	@section AUTHOR\n\
#	Consequential Robotics http://consequentialrobotics.com\n\
#	\n\
#	@section LICENSE\n\
#	For a full copy of the license agreement, and a complete\n\
#	definition of \"The Software\", see LICENSE in the MDK root\n\
#	directory.\n\
#	\n\
#	Subject to the terms of this Agreement, Consequential\n\
#	Robotics grants to you a limited, non-exclusive, non-\n\
#	transferable license, without right to sub-license, to use\n\
#	\"The Software\" in accordance with this Agreement and any\n\
#	other written agreement with Consequential Robotics.\n\
#	Consequential Robotics does not transfer the title of \"The\n\
#	Software\" to you; the license granted to you is not a sale.\n\
#	This agreement is a binding legal agreement between\n\
#	Consequential Robotics and the purchasers or users of \"The\n\
#	Software\".\n\
#	\n\
#	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n\
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n\
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n\
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n\
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\
#	\n\
#\n\
# the \"animal_state\" is the state of the animal aspects of the model\n\
# which includes \"affect\" values for emotion (quickly changing) and\n\
# mood (slowly changing) and a \"sleep\" value (also slowly changing),\n\
# and the animal's estimate of time. this state may also include, in\n\
# future, physical states such as temperature.\n\
\n\
#	DOCLINK ANIMAL STATE FLAGS\n\
#\n\
#	Some flags are included here because parts of the implementation\n\
#	are in separate nodes that read this topic in order to determine\n\
#	how they should behave, and their behaviour is affected by flags.\n\
#\n\
#	The values of these flags are defined in miro2.constants.\n\
uint32 flags\n\
\n\
# affective states\n\
affect emotion\n\
affect mood\n\
\n\
# sleep state\n\
sleep sleep\n\
\n\
# normalised time of day (0.0 -> 1.0)\n\
float32 time_of_day\n\
\n\
# normalised ambient sound level (0.0 -> 1.0)\n\
# < 0.01 : pretty quiet\n\
# 0.01 : normal ambient music\n\
# 0.02-0.03 : loud music\n\
# 0.05 : very loud music\n\
# > 0.1 : System of a Down\n\
float32 sound_level\n\
\n\
\n\
================================================================================\n\
MSG: miro2_msg/affect\n\
#	@section COPYRIGHT\n\
#	Copyright (C) 2019 Consequential Robotics Ltd\n\
#	\n\
#	@section AUTHOR\n\
#	Consequential Robotics http://consequentialrobotics.com\n\
#	\n\
#	@section LICENSE\n\
#	For a full copy of the license agreement, and a complete\n\
#	definition of \"The Software\", see LICENSE in the MDK root\n\
#	directory.\n\
#	\n\
#	Subject to the terms of this Agreement, Consequential\n\
#	Robotics grants to you a limited, non-exclusive, non-\n\
#	transferable license, without right to sub-license, to use\n\
#	\"The Software\" in accordance with this Agreement and any\n\
#	other written agreement with Consequential Robotics.\n\
#	Consequential Robotics does not transfer the title of \"The\n\
#	Software\" to you; the license granted to you is not a sale.\n\
#	This agreement is a binding legal agreement between\n\
#	Consequential Robotics and the purchasers or users of \"The\n\
#	Software\".\n\
#	\n\
#	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n\
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n\
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n\
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n\
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\
#	\n\
#\n\
#	The \"affect\" state is two-dimensional, encoding valence\n\
#	(-ve = sad, +ve = happy) and arousal (-ve = relaxed, +ve = alert).\n\
#	The states are usually driven by signals entering the robot's\n\
#	sensory systems, but can also be driven directly by other systems.\n\
\n\
float32 valence\n\
float32 arousal\n\
\n\
\n\
================================================================================\n\
MSG: miro2_msg/sleep\n\
#	@section COPYRIGHT\n\
#	Copyright (C) 2019 Consequential Robotics Ltd\n\
#	\n\
#	@section AUTHOR\n\
#	Consequential Robotics http://consequentialrobotics.com\n\
#	\n\
#	@section LICENSE\n\
#	For a full copy of the license agreement, and a complete\n\
#	definition of \"The Software\", see LICENSE in the MDK root\n\
#	directory.\n\
#	\n\
#	Subject to the terms of this Agreement, Consequential\n\
#	Robotics grants to you a limited, non-exclusive, non-\n\
#	transferable license, without right to sub-license, to use\n\
#	\"The Software\" in accordance with this Agreement and any\n\
#	other written agreement with Consequential Robotics.\n\
#	Consequential Robotics does not transfer the title of \"The\n\
#	Software\" to you; the license granted to you is not a sale.\n\
#	This agreement is a binding legal agreement between\n\
#	Consequential Robotics and the purchasers or users of \"The\n\
#	Software\".\n\
#	\n\
#	THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n\
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n\
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n\
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n\
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\
#	\n\
#\n\
#	The \"sleep\" state is two-dimensional, encoding \"wakefulness\"\n\
#	(0.0 to 1.0, what it sounds like) and \"pressure\" (0.0 to 1.0,\n\
#	tendency to move towards reduced wakefulness). The two states\n\
#	evolve together to implement a relaxation oscillator.\n\
\n\
float32 wakefulness\n\
float32 pressure\n\
\n\
";
  }

  static const char* value(const ::miro2_msg::animal_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::miro2_msg::animal_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flags);
      stream.next(m.emotion);
      stream.next(m.mood);
      stream.next(m.sleep);
      stream.next(m.time_of_day);
      stream.next(m.sound_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct animal_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::miro2_msg::animal_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::miro2_msg::animal_state_<ContainerAllocator>& v)
  {
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
    s << indent << "emotion: ";
    s << std::endl;
    Printer< ::miro2_msg::affect_<ContainerAllocator> >::stream(s, indent + "  ", v.emotion);
    s << indent << "mood: ";
    s << std::endl;
    Printer< ::miro2_msg::affect_<ContainerAllocator> >::stream(s, indent + "  ", v.mood);
    s << indent << "sleep: ";
    s << std::endl;
    Printer< ::miro2_msg::sleep_<ContainerAllocator> >::stream(s, indent + "  ", v.sleep);
    s << indent << "time_of_day: ";
    Printer<float>::stream(s, indent + "  ", v.time_of_day);
    s << indent << "sound_level: ";
    Printer<float>::stream(s, indent + "  ", v.sound_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MIRO2_MSG_MESSAGE_ANIMAL_STATE_H
