# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from miro2_msg/affect_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import miro2_msg.msg

class affect_state(genpy.Message):
  _md5sum = "8eba44c465d72613e49b25d7a944efcf"
  _type = "miro2_msg/affect_state"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#	@section COPYRIGHT
#	Copyright (C) 2019 Consequential Robotics Ltd
#	
#	@section AUTHOR
#	Consequential Robotics http://consequentialrobotics.com
#	
#	@section LICENSE
#	For a full copy of the license agreement, see LICENSE in the
#	MDK root directory.
#	
#	Subject to the terms of this Agreement, Consequential
#	Robotics grants to you a limited, non-exclusive, non-
#	transferable license, without right to sub-license, to use
#	MIRO Developer Kit in accordance with this Agreement and any
#	other written agreement with Consequential Robotics.
#	Consequential Robotics does not transfer the title of MIRO
#	Developer Kit to you; the license granted to you is not a
#	sale. This agreement is a binding legal agreement between
#	Consequential Robotics and the purchasers or users of MIRO
#	Developer Kit.
#	
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#	DOCLINK AFFECT FLAGS
#
#	The values of these flags are defined in miro2.constants
#
#	AFFECT_EXPRESS_THROUGH_VOICE
#		Enable vocal expression of affective state
#
#	AFFECT_EXPRESS_THROUGH_BODY
#		Enable body expression of affective state
uint32 flags

# the "affect_state" is the complete affective state, including
# "affect" values for emotion (quickly changing) and mood (slowly
# changing) and a "sleep" value (also slowly changing).
affect emotion
affect mood
sleep sleep


================================================================================
MSG: miro2_msg/affect
#	@section COPYRIGHT
#	Copyright (C) 2019 Consequential Robotics Ltd
#	
#	@section AUTHOR
#	Consequential Robotics http://consequentialrobotics.com
#	
#	@section LICENSE
#	For a full copy of the license agreement, see LICENSE in the
#	MDK root directory.
#	
#	Subject to the terms of this Agreement, Consequential
#	Robotics grants to you a limited, non-exclusive, non-
#	transferable license, without right to sub-license, to use
#	MIRO Developer Kit in accordance with this Agreement and any
#	other written agreement with Consequential Robotics.
#	Consequential Robotics does not transfer the title of MIRO
#	Developer Kit to you; the license granted to you is not a
#	sale. This agreement is a binding legal agreement between
#	Consequential Robotics and the purchasers or users of MIRO
#	Developer Kit.
#	
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#	The "affect" state is two-dimensional, encoding valence
#	(-ve = sad, +ve = happy) and arousal (-ve = relaxed, +ve = alert).
#	The states are usually driven by signals entering the robot's
#	sensory systems, but can also be driven directly by other systems.

float32 valence
float32 arousal


================================================================================
MSG: miro2_msg/sleep
#	@section COPYRIGHT
#	Copyright (C) 2019 Consequential Robotics Ltd
#	
#	@section AUTHOR
#	Consequential Robotics http://consequentialrobotics.com
#	
#	@section LICENSE
#	For a full copy of the license agreement, see LICENSE in the
#	MDK root directory.
#	
#	Subject to the terms of this Agreement, Consequential
#	Robotics grants to you a limited, non-exclusive, non-
#	transferable license, without right to sub-license, to use
#	MIRO Developer Kit in accordance with this Agreement and any
#	other written agreement with Consequential Robotics.
#	Consequential Robotics does not transfer the title of MIRO
#	Developer Kit to you; the license granted to you is not a
#	sale. This agreement is a binding legal agreement between
#	Consequential Robotics and the purchasers or users of MIRO
#	Developer Kit.
#	
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
#	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
#	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
#	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
#	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#	The "sleep" state is two-dimensional, encoding "wakefulness"
#	(0.0 to 1.0, what it sounds like) and "pressure" (0.0 to 1.0,
#	tendency to move towards reduced wakefulness). The two states
#	evolve together to implement a relaxation oscillator.

float32 wakefulness
float32 pressure

"""
  __slots__ = ['flags','emotion','mood','sleep']
  _slot_types = ['uint32','miro2_msg/affect','miro2_msg/affect','miro2_msg/sleep']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       flags,emotion,mood,sleep

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(affect_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.flags is None:
        self.flags = 0
      if self.emotion is None:
        self.emotion = miro2_msg.msg.affect()
      if self.mood is None:
        self.mood = miro2_msg.msg.affect()
      if self.sleep is None:
        self.sleep = miro2_msg.msg.sleep()
    else:
      self.flags = 0
      self.emotion = miro2_msg.msg.affect()
      self.mood = miro2_msg.msg.affect()
      self.sleep = miro2_msg.msg.sleep()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I6f().pack(_x.flags, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.emotion is None:
        self.emotion = miro2_msg.msg.affect()
      if self.mood is None:
        self.mood = miro2_msg.msg.affect()
      if self.sleep is None:
        self.sleep = miro2_msg.msg.sleep()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.flags, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure,) = _get_struct_I6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I6f().pack(_x.flags, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.emotion is None:
        self.emotion = miro2_msg.msg.affect()
      if self.mood is None:
        self.mood = miro2_msg.msg.affect()
      if self.sleep is None:
        self.sleep = miro2_msg.msg.sleep()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.flags, _x.emotion.valence, _x.emotion.arousal, _x.mood.valence, _x.mood.arousal, _x.sleep.wakefulness, _x.sleep.pressure,) = _get_struct_I6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I6f = None
def _get_struct_I6f():
    global _struct_I6f
    if _struct_I6f is None:
        _struct_I6f = struct.Struct("<I6f")
    return _struct_I6f
